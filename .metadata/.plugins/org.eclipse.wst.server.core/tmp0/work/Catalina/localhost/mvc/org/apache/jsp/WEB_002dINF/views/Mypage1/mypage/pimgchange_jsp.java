/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.41
 * Generated at: 2021-04-03 13:03:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.Mypage1.mypage;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class pimgchange_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("jar:file:/C:/Users/Jiyoung/gitTest/latest_jyjy_branch/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/SpringMvcGitAttempt/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/Users/Jiyoung/gitTest/latest_jyjy_branch/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/SpringMvcGitAttempt/WEB-INF/lib/spring-webmvc-4.3.25.RELEASE.jar!/META-INF/spring-form.tld", Long.valueOf(1564700074000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-4.3.25.RELEASE.jar", Long.valueOf(1613358507160L));
    _jspx_dependants.put("/WEB-INF/lib/tiles-jsp-3.0.8.jar", Long.valueOf(1614131675272L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1613358274103L));
    _jspx_dependants.put("jar:file:/C:/Users/Jiyoung/gitTest/latest_jyjy_branch/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/SpringMvcGitAttempt/WEB-INF/lib/tiles-jsp-3.0.8.jar!/META-INF/tld/tiles-jsp.tld", Long.valueOf(1506773284000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>프로필 사진 변경</title>\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/default.css\" rel=\"stylesheet\" />\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/mypage1/cropper.css\" rel=\"stylesheet\" />\n");
      out.write("<style type=\"text/css\">\n");
      out.write("\tbody{\n");
      out.write("\t\t/* width: 420px; margin:0 auto;  */\n");
      out.write("\t\tfont-family: Noto Sans KR;\n");
      out.write("\t}\n");
      out.write("\t#upper{\n");
      out.write("\t\tfont-size: 22px;\n");
      out.write("\t\tfont-style: medium;\n");
      out.write("\t\tfont-weight: 600; line-height: 52px;\n");
      out.write("\t\ttext-align: center;\n");
      out.write("\t}\n");
      out.write("\t#upper img{position: absolute; left:18px; margin-top:13px; height:27px;}\n");
      out.write("\t#upper hr{ background-color:#FF9A7F; border: 0; height: 20px; }\n");
      out.write("\tdiv { width: 420px; margin:0 auto;\n");
      out.write("\t}\n");
      out.write("\t#result > img { width: 300px; margin:0 auto; }\n");
      out.write("\t\n");
      out.write("\t.container {\n");
      out.write("      margin: 20px auto;\n");
      out.write("      max-width: 640px;\n");
      out.write("    }\n");
      out.write("    img {\n");
      out.write("      max-width: 100%;\n");
      out.write("    }\n");
      out.write("    .cropper-view-box,\n");
      out.write("    .cropper-face {\n");
      out.write("      border-radius: 50%;\n");
      out.write("    }\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div id=\"upper\">\n");
      out.write("<img alt=\"뒤로가기\" src=\"resources/images/usersetting/arrow.png\" onclick=\"history.back()\">\n");
      out.write("<span>프로필 사진 변경</span><hr>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div class=\"container\">\n");
      out.write("    <h2>프로필용으로 사진 자르기</h2>\n");
      out.write("    <div class=\"upload\">\n");
      out.write("    \t<label for=\"photoBtn\">사진 첨부하기</label><br>\n");
      out.write("    \t<input type=\"file\" name=\"photoBtn\" accept=\"image/jpeg, image/png\" capture=\"camera\" id=\"photoBtn\">\n");
      out.write("    </div>\n");
      out.write("    <div class=\"them_img\">\n");
      out.write("      <img id=\"image\" src=\"resources/images/usersetting/imgbox.png\" >\n");
      out.write("    </div>\n");
      out.write("    <h3>Result</h3>    \n");
      out.write("    <p>\n");
      out.write("      <input type=\"hidden\" id=\"user_id\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("      <button type=\"button\" id=\"button\">등록하기</button>\n");
      out.write("    </p>\n");
      out.write("    <div id=\"result\"></div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/mypage1/cropper.js\"></script>\n");
      out.write("  <script>\n");
      out.write("  //사진 업로드\n");
      out.write("   function getRoundedCanvas(sourceCanvas) {\n");
      out.write("      var canvas = document.createElement('canvas');\n");
      out.write("      var context = canvas.getContext('2d');\n");
      out.write("      var width = sourceCanvas.width;\n");
      out.write("      var height = sourceCanvas.height;\n");
      out.write("\n");
      out.write("      canvas.width = width;\n");
      out.write("      canvas.height = height;\n");
      out.write("      context.imageSmoothingEnabled = true;\n");
      out.write("      context.drawImage(sourceCanvas, 0, 0, width, height);\n");
      out.write("      context.globalCompositeOperation = 'destination-in';\n");
      out.write("      context.beginPath();\n");
      out.write("      context.arc(width / 2, height / 2, Math.min(width, height) / 2, 0, 2 * Math.PI, true);\n");
      out.write("      context.fill();\n");
      out.write("      return canvas;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("   $(function(){\n");
      out.write("\t   //크롭 전 이미지 미리보기\n");
      out.write("\t   $('#photoBtn').on('change', function(){\n");
      out.write("\t        $('.them_img').empty().append('<img id=\"image\" src=\"\">');\n");
      out.write("\t        var image = $('#image');\n");
      out.write("\t        var imgFile = $('#photoBtn').val();\n");
      out.write("\t        var fileForm = /(.*?)\\.(jpg|jpeg|png)$/;\n");
      out.write("\t   \n");
      out.write("\t        if(imgFile.match(fileForm)) {\n");
      out.write("\t        \tvar reader = new FileReader(); \n");
      out.write("\t        \treader.onload = function(event) { \n");
      out.write("\t        \t\timage.attr(\"src\", event.target.result);\n");
      out.write("\t        \t\t var image2 = document.getElementById('image');\n");
      out.write("\t     \t        var button = document.getElementById('button');     \n");
      out.write("\t     \t        var result = document.getElementById('result');\n");
      out.write("\t     \t        var croppable = false;\n");
      out.write("\t     \t        var cropper = new Cropper(image2, {\n");
      out.write("\t     \t          aspectRatio: 1,\n");
      out.write("\t     \t          viewMode: 1,\n");
      out.write("\t     \t          ready: function () {\n");
      out.write("\t     \t            croppable = true;\n");
      out.write("\t     \t          },\n");
      out.write("\t     \t        });\n");
      out.write("\n");
      out.write("\t     \t        button.onclick = function () {\n");
      out.write("\t     \t          var croppedCanvas;\n");
      out.write("\t     \t          var roundedCanvas;\n");
      out.write("\t     \t          var roundedImage;\n");
      out.write("\n");
      out.write("\t     \t          if (!croppable) {\n");
      out.write("\t     \t            return;\n");
      out.write("\t     \t          }\n");
      out.write("\n");
      out.write("\t     \t          // Crop\n");
      out.write("\t     \t          croppedCanvas = cropper.getCroppedCanvas();\n");
      out.write("\n");
      out.write("\t     \t          // Round\n");
      out.write("\t     \t          roundedCanvas = getRoundedCanvas(croppedCanvas);\n");
      out.write("\n");
      out.write("\t     \t          // Show\n");
      out.write("\t     \t          roundedImage = document.createElement('img');\n");
      out.write("\t     \t          roundedImage.src = roundedCanvas.toDataURL()\n");
      out.write("\t     \t          result.innerHTML = '';\n");
      out.write("\t     \t          result.appendChild(roundedImage);\n");
      out.write("\t     \t          \n");
      out.write("\t     \t         croppedCanvas.toBlob((blob) => {\n");
      out.write("\t     \t        \t  const formData = new FormData();\n");
      out.write("\t     \t        \t  var user_id = $('#user_id').val();\n");
      out.write("\n");
      out.write("\t     \t        \t  // Pass the image file name as the third parameter if necessary.\n");
      out.write("\t     \t        \t  formData.append('croppedImage', blob/*, 'example.png' */);\n");
      out.write("\n");
      out.write("\t     \t        \t  // Use `jQuery.ajax` method for example\n");
      out.write("\t     \t        \t  $.ajax( {\n");
      out.write("\t     \t        \t    method: 'POST',\n");
      out.write("\t     \t        \t    url: 'saveIamge?user_id='+user_id,\n");
      out.write("\t     \t        \t    data: formData,\n");
      out.write("\t     \t        \t   dataType: 'json',\n");
      out.write("\t     \t        \t    processData: false,\n");
      out.write("\t     \t        \t    contentType: false,\n");
      out.write("\t     \t        \t    success(msg) {\n");
      out.write("\t     \t        \t      console.log('Upload success');\n");
      out.write("\t     \t        \t      alert(msg);\n");
      out.write("\t     \t        \t      window.location.href = 'profilechange?user_id='+user_id;\n");
      out.write("\t     \t        \t    },\n");
      out.write("\t     \t        \t    error() {\n");
      out.write("\t     \t        \t      console.log('Upload error');\n");
      out.write("\t     \t        \t    },\n");
      out.write("\t     \t        \t  });\n");
      out.write("\t     \t        \t} )\n");
      out.write("\t     \t         \n");
      out.write("\t     \t        }; \n");
      out.write("\t        \t\t}\t    \n");
      out.write("\t        \t\treader.readAsDataURL(event.target.files[0]);\n");
      out.write("\t        \t\n");
      out.write("\t        \t} else{\n");
      out.write("\t            \talert(\"이미지 파일(jpg, png형식의 파일)만 올려주세요\");\n");
      out.write("\t            \t$('#photoBtn').focus();\n");
      out.write("\t            \treturn; \n");
      out.write("\t        \t}\n");
      out.write("\t    })\n");
      out.write("    });\n");
      out.write("  </script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/Mypage1/mypage/pimgchange.jsp(5,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("contextPath");
      // /WEB-INF/views/Mypage1/mypage/pimgchange.jsp(5,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/Mypage1/mypage/pimgchange.jsp(5,0) '${pageContext.request.contextPath}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }
}
