/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.41
 * Generated at: 2021-04-03 12:11:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class socialLogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"EUC-KR\">\n");
      out.write("<!-- 합쳐지고 최소화된 최신 CSS -->\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("\thref=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\">\n");
      out.write("\n");
      out.write("<!-- 구글 로그인 설정 -->\n");
      out.write("<meta name=\"google-signin-scope\" content=\"profile email\">\n");
      out.write("<script src=\"https://apis.google.com/js/platform.js?onload=renderButton\"\n");
      out.write("\tasync defer></script>\n");
      out.write("<meta name=\"google-signin-client_id\"\n");
      out.write("\tcontent=\"682293530114-lsru175992b90da5c2c292i6orlcdr1b.apps.googleusercontent.com\">\n");
      out.write("<!-- 학원용 (lrsu) 집 (c80a) 클라이언트ID\n");
      out.write("\t682293530114-lsru175992b90da5c2c292i6orlcdr1b.apps.googleusercontent.com\n");
      out.write("\t682293530114-c80ahhfq30vtb3lgonk24tjh7o05v6l4.apps.googleusercontent.com \n");
      out.write("-->\n");
      out.write("\n");
      out.write("<!-- 네이버 로그인 설정 -->\n");
      out.write("<script type=\"text/javascript\"\n");
      out.write("\tsrc=\"https://static.nid.naver.com/js/naverLogin_implicit-1.0.2.js\"\n");
      out.write("\tcharset=\"utf-8\"></script>\n");
      out.write("<script type=\"text/javascript\"\n");
      out.write("\tsrc=\"http://code.jquery.com/jquery-1.11.3.min.js\"></script>\n");
      out.write("\n");
      out.write("<title>소셜로그인 페이지</title>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("\t<!-- 구글 로그인 -->\n");
      out.write("\t<div class=\"g-signin2\" data-onsuccess=\"onSignIn\" data-theme=\"dark\"></div>\n");
      out.write("\t<script type=\"text/javascript\">\n");
      out.write("\t\tfunction onSignIn(googleUser) {\n");
      out.write("\t\t\t// Useful data for your client-side scripts:\n");
      out.write("\t\t\tvar profile = googleUser.getBasicProfile();\n");
      out.write("\t\t\tconsole.log(\"ID: \" + profile.getId()); // Don't send this directly to your server!\n");
      out.write("\t\t\tconsole.log('Full Name: ' + profile.getName());\n");
      out.write("\t\t\tconsole.log(\"Image URL: \" + profile.getImageUrl());\n");
      out.write("\t\t\tconsole.log(\"Email: \" + profile.getEmail());\n");
      out.write("\n");
      out.write("\t\t\t// The ID token you need to pass to your backend:\n");
      out.write("\t\t\tvar id_token = googleUser.getAuthResponse().id_token;\n");
      out.write("\t\t\tvar userName = profile.getName();\n");
      out.write("\t\t\tvar user_email = profile.getEmail();\n");
      out.write("\t\t\tvar userImg = profile.getImageUrl();\n");
      out.write("\n");
      out.write("\t\t\tsessionStorage.setItem('user_email', user_email);\n");
      out.write("\t\t\tconsole.log(sessionStorage.getItem(\"user_email\"));\n");
      out.write("\t\t\tsessionStorage.setItem('userImg', userImg);\n");
      out.write("\t\t\tconsole.log(sessionStorage.getItem(\"userImg\"));\n");
      out.write("\t\t\tsessionStorage.setItem('user_name', userName);\n");
      out.write("\t\t\tconsole.log(sessionStorage.getItem(\"user_name\"));\n");
      out.write("\n");
      out.write("\t\t\t/* let data = {\n");
      out.write("\t\t\t\t\"user_email\" : email,\n");
      out.write("\t\t\t\t\"userImg\" : userImg,\n");
      out.write("\t\t\t\t\"user_name\" : userName\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t$.ajax({ //컨트롤러와 통신\n");
      out.write("\t\t\t\tdataType : \"json\",\n");
      out.write("\t\t\t\tmethod : \"POST\",\n");
      out.write("\t\t\t\turl : \"/mvc/user/login/insertDB\",\n");
      out.write("\t\t\t\tdata : data\n");
      out.write("\t\t\t}).done(function() {\n");
      out.write("\t\t\t\tconsole.log(\"success!\")\n");
      out.write("\t\t\t}) */\n");
      out.write("\n");
      out.write("\t\t\tvar data = \"user_email=\" + user_email;\n");
      out.write("\n");
      out.write("\t\t\t$.ajax({ //컨트롤러와 통신\n");
      out.write("\t\t\t\tdataType : \"json\",\n");
      out.write("\t\t\t\tmethod : \"POST\",\n");
      out.write("\t\t\t\turl : \"/mvc/user/login/email\",\n");
      out.write("\t\t\t\tdata : data\n");
      out.write("\t\t\t}).done(function() {\n");
      out.write("\t\t\t\tconsole.log(\"success!\")\n");
      out.write("\t\t\t})\n");
      out.write("\n");
      out.write("\t\t\t// 로그인 후 페이지 이동 경로 설정 ( href 대신에 replace 를 사용하면 페이지기록이 남지 않아 뒤로가기 시, 이동 불가. 보안이나 도배글 방지용으로 유용. \n");
      out.write("\t\t\tdocument.location.href = \"/mvc/index.jsp\"\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t$(document).ready(function() {\n");
      out.write("\t\t\t// 취소\n");
      out.write("\t\t\t$(\"#cancle\").on(\"click\", function() {\n");
      out.write("\t\t\t\tlocation.href = \"/mvc/index.jsp\";\n");
      out.write("\t\t\t})\n");
      out.write("\t\t\t});\n");
      out.write("\t</script>\n");
      out.write("\n");
      out.write("\t<!-- 네이버 로그인 화면으로 이동 시키는 URL -->\n");
      out.write("\t<!-- 네이버 로그인 화면에서 ID, PW를 올바르게 입력하면 callback 메소드 실행 요청 -->\n");
      out.write("\t<div id=\"naver_id_login\">\n");
      out.write("\t\t<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${naver_url}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"><img width=\"200\"\n");
      out.write("\t\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/img/naver_w_in.PNG\" /></a>\n");
      out.write("\t</div>\n");
      out.write("\t<div>\n");
      out.write("\t\t<button class=\"btn btn-danger\" type=\"button\" id=\"cancle\">취소</button>\n");
      out.write("\t</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
