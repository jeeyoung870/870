/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.41
 * Generated at: 2021-02-26 05:58:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.uploadAjax;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class form_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Document</title>\r\n");
      out.write("</head>\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("    *{padding:0;margin:0}\r\n");
      out.write("    html, body, .wrap{width: 100%;}\r\n");
      out.write("    .clear{clear:both;}\r\n");
      out.write("    .wrap>.fileBox{padding: 20px;}\r\n");
      out.write("    .fileBox input, textarea{width: 100%;}\r\n");
      out.write("    .fileBox textarea{resize:none;}\r\n");
      out.write("    .fileBox .fileDrop{display: inline-block;width: 700px;height: 75px;border: 1px solid #000;overflow: auto;}\r\n");
      out.write("    .fileDrop .fileList .fileName{padding-left: 20px;}\r\n");
      out.write("    .fileDrop .fileList .fileSize{padding-right: 20px; float:right;}\r\n");
      out.write("</style>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"wrap\">\r\n");
      out.write("        <div class=\"fileBox\">\r\n");
      out.write("            <form id=\"fileForm\" name=\"fileForm\" enctype=\"multipart/form-data\" method=\"post\">\r\n");
      out.write("                <table>\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>title : <input type=\"text\" name=\"title\"></td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>contents : <textarea name=\"contents\"></textarea></td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>files :<br><div id=\"fileDrop\" class=\"fileDrop\"></div></td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                </table>\r\n");
      out.write("                <div class=\"buttonBox\">\r\n");
      out.write("                    <button type=\"button\" id=\"save\">저장</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("var fileList = []; //파일 정보를 담아 둘 배열\r\n");
      out.write("$(function(){\r\n");
      out.write("\r\n");
      out.write("    //드래그앤드랍\r\n");
      out.write("    //e : 발생한 이벤트 객체\r\n");
      out.write("    $(\"#fileDrop\").on(\"dragenter\", function(e){\r\n");
      out.write("        e.preventDefault();\t//페이지 최상단으로 가는 것 방지\r\n");
      out.write("        e.stopPropagation();\t//부모 태그로의 이벤트 전파 방지\r\n");
      out.write("    }).on(\"dragover\", function(e){\r\n");
      out.write("        e.preventDefault();\r\n");
      out.write("        e.stopPropagation();\r\n");
      out.write("        $(this).css(\"background-color\", \"#FFD8D8\");\r\n");
      out.write("    }).on(\"dragleave\", function(e){\r\n");
      out.write("        e.preventDefault();\r\n");
      out.write("        e.stopPropagation();\r\n");
      out.write("        $(this).css(\"background-color\", \"#FFF\");\r\n");
      out.write("    }).on(\"drop\", function(e){\r\n");
      out.write("        e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("        //drag&drop 한 모든 파일들의 정보를 가진 FileList구하기\r\n");
      out.write("        var files = e.originalEvent.dataTransfer.files;\r\n");
      out.write("        if(files != null && files != undefined){\r\n");
      out.write("            var tag = \"\";\r\n");
      out.write("            //files.length : 파일들 갯수\r\n");
      out.write("            for(i=0; i<files.length; i++){\r\n");
      out.write("                var f = files[i];\r\n");
      out.write("                //파일 업로드 목록에 추가\r\n");
      out.write("                fileList.push(f);\r\n");
      out.write("                var fileName = f.name;\r\n");
      out.write("                var fileSize = f.size / 1024 / 1024;\r\n");
      out.write("                fileSize = fileSize < 1 ? fileSize.toFixed(3) : fileSize.toFixed(1);\r\n");
      out.write("                tag += \r\n");
      out.write("                        \"<div class='fileList'>\" +\r\n");
      out.write("                            \"<span class='fileName'>\"+fileName+\"</span>\" +\r\n");
      out.write("                            \"<span class='fileSize'>\"+fileSize+\" MB</span>\" +\r\n");
      out.write("                            \"<span class='clear'></span>\" +\r\n");
      out.write("                        \"</div>\";\r\n");
      out.write("            }\r\n");
      out.write("            //this : fileDrop엘리먼트\r\n");
      out.write("            $(this).append(tag);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        $(this).css(\"background-color\", \"#FFF\");\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    //저장 (저장버튼을 클릭시)\r\n");
      out.write("    $(document).on(\"click\", \"#save\", function(){\r\n");
      out.write("    \t//FormData : fileForm폼에 들어온 모든 내용들을 ajax에 data로 실어보낼 객체로 만든다.\r\n");
      out.write("        var formData = new FormData($(\"#fileForm\")[0]);\r\n");
      out.write("        if(fileList.length > 0){\r\n");
      out.write("            fileList.forEach(function(f){\r\n");
      out.write("            \t//올린 파일들을 formData의 fileList에 추가\r\n");
      out.write("                formData.append(\"fileList\", f);\r\n");
      out.write("            });\r\n");
      out.write("        }         \r\n");
      out.write("\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            url : \"uploadPath.do\",\r\n");
      out.write("            data : formData,\r\n");
      out.write("            type:'POST',\r\n");
      out.write("            enctype:'multipart/form-data',\r\n");
      out.write("            processData:false,\t//FormData 사용시 false설정해야 함\r\n");
      out.write("            contentType:false,\t//FormData 사용시 false설정해야 함\r\n");
      out.write("            dataType:'json',\r\n");
      out.write("            cache:false,\r\n");
      out.write("            success:function(res){\r\n");
      out.write("            \tconsole.log(res);\r\n");
      out.write("            \tif(res == 1) {\r\n");
      out.write("            \t\talert(\"저장에 성공하셨습니다.\");\r\n");
      out.write("            \t}else{\r\n");
      out.write("            \t\talert(\"파일 업로드 실패\");\r\n");
      out.write("            \t}\r\n");
      out.write("            },error:function(res){\r\n");
      out.write("                alert(\"오류 발생.\\n관리자에게 문의해주세요.\");\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
